name: Deploy to GKE (Workload Identity)

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  REGISTRY: gcr.io
  IMAGE_NAME: job-scheduler

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Build TypeScript
      run: npm run build
      
    - name: Test Docker build
      run: docker build -t $IMAGE_NAME .

  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: github-actions-scheduler@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com
        create_credentials_file: true
        export_environment_variables: true
        
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker gcr.io
        echo "✅ Docker configured for GCR"
        
    - name: Test GCR authentication
      run: |
        echo "🔍 Testing GCR authentication..."
        gcloud auth list
        echo "📦 Testing GCR access..."
        echo "🔧 Ensuring GCR repository exists..."
        gcloud container images list-tags gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }} --limit=1 || echo "No existing images found - repository will be created on first push"
        echo "✅ GCR authentication test complete"
        
    - name: Get GCR access token
      id: gcr-token
      run: |
        echo "🔐 Getting GCR access token..."
        ACCESS_TOKEN=$(gcloud auth print-access-token)
        echo "token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT
        echo "✅ Access token obtained"
        
    - name: Login to GCR
      uses: docker/login-action@v3
      with:
        registry: gcr.io
        username: oauth2accesstoken
        password: ${{ steps.gcr-token.outputs.token }}
        
    - name: Verify Docker authentication
      run: |
        echo "🔍 Verifying Docker can access GCR..."
        docker pull hello-world || echo "Using local hello-world image"
        echo "✅ Docker authentication verified"
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    environment: ${{ inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: github-actions-scheduler@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com
        create_credentials_file: true
        export_environment_variables: true
        
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --zone ${{ env.GKE_ZONE }} \
          --project ${{ env.PROJECT_ID }}
          
    - name: Update Kubernetes manifests
      run: |
        # Update deployment.yaml with correct image
        sed -i "s|gcr.io/YOUR_PROJECT_ID/job-scheduler:latest|${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" k8s/deployment.yaml
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/network-policy.yaml
        
    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/job-scheduler -n scheduler-app
        
    - name: Verify deployment
      run: |
        kubectl get pods -n scheduler-app
        kubectl get svc -n scheduler-app
        
    - name: Test health endpoint
      run: |
        kubectl exec -n scheduler-app deployment/job-scheduler -- curl -s http://localhost:8081/health
        
    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: ${{ inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ✅ Successfully deployed" >> $GITHUB_STEP_SUMMARY
        echo "**Image**: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Steps**: Monitor the deployment and verify connectivity" >> $GITHUB_STEP_SUMMARY
